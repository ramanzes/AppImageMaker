#!/bin/bash

# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ AppImage Builder —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

show_usage() {
    echo "üê≥ AppImage Builder - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∑–∞–ø—É—Å–∫"
    echo "========================================"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏—è]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  auto     - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "  simple   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π Dockerfile"
    echo "  host     - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ö–æ—Å—Ç-—Å–µ—Ç—å"
    echo "  mirror   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∑–µ—Ä–∫–∞–ª–∞"
    echo "  test     - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å"
    echo "  clean    - –û—á–∏—Å—Ç–∏—Ç—å Docker –∫—ç—à –∏ –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å"
    echo "  help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0              # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º"
    echo "  $0 test         # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏"
    echo "  $0 simple       # –ü—Ä–æ—Å—Ç–∞—è —Å–±–æ—Ä–∫–∞"
    echo "  $0 clean        # –û—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
MODE=${1:-auto}

case "$MODE" in
    help|-h|--help)
        show_usage
        exit 0
        ;;
esac

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
if ! command -v docker &> /dev/null; then
    log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    log_error "docker-compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p ./itdid

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª todo
if [[ ! -f "./todo" ]]; then
    log_warning "–§–∞–π–ª todo –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä..."
    cat > ./todo << 'EOF'
# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è AppImage
krusader
htop
mc
gedit
EOF
    log_info "üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª todo —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"
    log_info "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª todo –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
    exit 0
fi

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏
test_network() {
    log_info "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker —Å–µ—Ç–∏..."
    chmod +x test-docker-network.sh
    ./test-docker-network.sh
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
clean_docker() {
    log_info "üßπ –û—á–∏—Å—Ç–∫–∞ Docker –∫—ç—à–∞..."
    docker system prune -f
    docker-compose down --volumes --remove-orphans 2>/dev/null || true
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ —Å –ø—Ä–æ—Å—Ç—ã–º Dockerfile
build_simple() {
    log_info "üîß –°–±–æ—Ä–∫–∞ —Å –ø—Ä–æ—Å—Ç—ã–º Dockerfile..."
    cp Dockerfile.simple Dockerfile.current
    docker build -f Dockerfile.current -t appimage-builder:simple .
    docker run --rm -v $(pwd):/workspace --privileged appimage-builder:simple
}

# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ —Å —Ö–æ—Å—Ç-—Å–µ—Ç—å—é
build_host_network() {
    log_info "üåê –°–±–æ—Ä–∫–∞ —Å —Ö–æ—Å—Ç-—Å–µ—Ç—å—é..."
    docker build --network=host -t appimage-builder:host .
    docker run --rm -v --network=host -v $(pwd):/workspace --privileged appimage-builder:host
}

# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –∑–µ—Ä–∫–∞–ª–∞–º–∏
build_with_mirrors() {
    log_info "üá∑üá∫ –°–±–æ—Ä–∫–∞ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –∑–µ—Ä–∫–∞–ª–∞–º–∏..."
    cp Dockerfile.alternative Dockerfile.current
    docker build -f Dockerfile.current -t appimage-builder:mirror .
    docker run --rm -v $(pwd):/workspace --privileged appimage-builder:mirror
}

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
build_auto() {
    log_info "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–±–æ—Ä–∫–∏..."
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–±–æ—Ä–∫—É
    log_info "–ü–æ–ø—ã—Ç–∫–∞ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–±–æ—Ä–∫–∞..."
    if docker-compose build --no-cache 2>/dev/null && docker-compose run --rm appimage-builder 2>/dev/null; then
        log_success "‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞!"
        return 0
    fi
    log_warning "‚ùå –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü—Ä–æ—Å—Ç–æ–π Dockerfile
    log_info "–ü–æ–ø—ã—Ç–∫–∞ 2: –ü—Ä–æ—Å—Ç–∞—è —Å–±–æ—Ä–∫–∞..."
    if build_simple 2>/dev/null; then
        log_success "‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Å–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞!"
        return 0
    fi
    log_warning "‚ùå –ü—Ä–æ—Å—Ç–∞—è —Å–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –•–æ—Å—Ç-—Å–µ—Ç—å
    log_info "–ü–æ–ø—ã—Ç–∫–∞ 3: –°–±–æ—Ä–∫–∞ —Å —Ö–æ—Å—Ç-—Å–µ—Ç—å—é..."
    if build_host_network 2>/dev/null; then
        log_success "‚úÖ –°–±–æ—Ä–∫–∞ —Å —Ö–æ—Å—Ç-—Å–µ—Ç—å—é —É—Å–ø–µ—à–Ω–∞!"
        return 0
    fi
    log_warning "‚ùå –°–±–æ—Ä–∫–∞ —Å —Ö–æ—Å—Ç-—Å–µ—Ç—å—é –Ω–µ —É–¥–∞–ª–∞—Å—å"
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∑–µ—Ä–∫–∞–ª–∞
    log_info "–ü–æ–ø—ã—Ç–∫–∞ 4: –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∑–µ—Ä–∫–∞–ª–∞..."
    if build_with_mirrors 2>/dev/null; then
        log_success "‚úÖ –°–±–æ—Ä–∫–∞ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –∑–µ—Ä–∫–∞–ª–∞–º–∏ —É—Å–ø–µ—à–Ω–∞!"
        return 0
    fi
    log_warning "‚ùå –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å"
    
    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å AppImage –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º"
    log_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ '$0 test' –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏"
    return 1
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "$MODE" in
    test)
        test_network
        ;;
    clean)
        clean_docker
        ;;
    simple)
        build_simple
        ;;
    host)
        build_host_network
        ;;
    mirror)
        build_with_mirrors
        ;;
    auto)
        build_auto
        ;;
    *)
        log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $MODE"
        show_usage
        exit 1
        ;;
esac

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
if [[ "$MODE" != "test" && "$MODE" != "clean" ]]; then
    log_info ""
    log_info "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."
    
    if ls ./itdid/*.AppImage 1> /dev/null 2>&1; then
        log_success "üì¶ –°–æ–∑–¥–∞–Ω–Ω—ã–µ AppImage —Ñ–∞–π–ª—ã:"
        ls -la ./itdid/*.AppImage
        
        log_info ""
        log_info "üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ AppImage:"
        echo "  chmod +x ./itdid/–Ω–∞–∑–≤–∞–Ω–∏–µ.AppImage"
        echo "  ./itdid/–Ω–∞–∑–≤–∞–Ω–∏–µ.AppImage"
    else
        log_warning "‚ùå AppImage —Ñ–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã"
        if [[ "$MODE" == "auto" ]]; then
            log_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: $0 test"
        fi
    fi
fi
