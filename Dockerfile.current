# Альтернативная версия Dockerfile с российскими зеркалами
FROM ubuntu:22.04

# Устанавливаем переменные окружения
ENV DEBIAN_FRONTEND=noninteractive
ENV LC_ALL=C.UTF-8
ENV LANG=C.UTF-8

# Копируем оригинальный sources.list для восстановления при необходимости
RUN cp /etc/apt/sources.list /etc/apt/sources.list.backup

# Настраиваем российские зеркала Ubuntu
RUN cat > /etc/apt/sources.list << 'EOF'
# Российские зеркала Ubuntu 22.04 (Jammy)
deb http://mirror.yandex.ru/ubuntu/ jammy main restricted universe multiverse
deb http://mirror.yandex.ru/ubuntu/ jammy-updates main restricted universe multiverse
deb http://mirror.yandex.ru/ubuntu/ jammy-backports main restricted universe multiverse
deb http://mirror.yandex.ru/ubuntu/ jammy-security main restricted universe multiverse

# Альтернативные зеркала
deb http://ru.archive.ubuntu.com/ubuntu/ jammy main restricted universe multiverse
deb http://ru.archive.ubuntu.com/ubuntu/ jammy-updates main restricted universe multiverse
deb http://ru.archive.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse
deb http://security.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
EOF

# DNS будет настроен через docker-compose, пропускаем настройку resolv.conf

# Обновляем и устанавливаем основные пакеты пошагово
RUN apt-get clean && \
    apt-get update --fix-missing -o Acquire::Retries=3 -o Acquire::http::Timeout="60"

# Устанавливаем основные утилиты сначала
RUN apt-get install -y --no-install-recommends \
    ca-certificates \
    apt-transport-https \
    gnupg \
    lsb-release

# Устанавливаем сетевые утилиты
RUN apt-get install -y --no-install-recommends \
    wget \
    curl \
    git

# Устанавливаем инструменты разработки
RUN apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    pkg-config \
    file

# Устанавливаем системные библиотеки
RUN apt-get install -y --no-install-recommends \
    libglib2.0-dev \
    libc6-dev \
    libfuse2 \
    fuse

# Устанавливаем Python и инструменты
RUN apt-get install -y --no-install-recommends \
    python3 \
    python3-pip

# Устанавливаем специализированные утилиты
RUN apt-get install -y --no-install-recommends \
    desktop-file-utils \
    squashfs-tools \
    zsync \
    patchelf

# Очищаем кэш
RUN rm -rf /var/lib/apt/lists/* && \
    apt-get clean

# Устанавливаем appimagetool и linuxdeploy
RUN wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O /usr/local/bin/appimagetool && \
    chmod +x /usr/local/bin/appimagetool

RUN wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage -O /usr/local/bin/linuxdeploy && \
    chmod +x /usr/local/bin/linuxdeploy

# Создаем рабочую директорию
WORKDIR /workspace

# Копируем скрипт сборщика
COPY build_appimages.sh /usr/local/bin/build_appimages.sh
RUN chmod +x /usr/local/bin/build_appimages.sh

# Устанавливаем точку входа
ENTRYPOINT ["/usr/local/bin/build_appimages.sh"]
